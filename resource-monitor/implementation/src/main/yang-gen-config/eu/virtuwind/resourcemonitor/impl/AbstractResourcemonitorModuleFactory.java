/*
* Generated file
*
* Generated from: yang module name: resourcemonitor-impl yang module local name: resourcemonitor-impl
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Tue Apr 17 16:39:12 BST 2018
*
* Do not modify this file unless it is present under src/main directory
*/
package eu.virtuwind.resourcemonitor.impl;

import org.opendaylight.controller.config.spi.Module;
import org.opendaylight.controller.config.api.ModuleIdentifier;

@org.opendaylight.yangtools.yang.binding.annotations.ModuleQName(namespace = "urn:eu:virtuwind:resourcemonitor:impl", name = "resourcemonitor-impl", revision = "2016-10-17")

public abstract class AbstractResourcemonitorModuleFactory implements org.opendaylight.controller.config.spi.ModuleFactory {
    public static final java.lang.String NAME = "resourcemonitor-impl";

    private static final java.util.Set<Class<? extends org.opendaylight.controller.config.api.annotations.AbstractServiceInterface>> serviceIfcs;

    @Override
    public final String getImplementationName() {
        return NAME;
    }

    static {
        serviceIfcs = java.util.Collections.emptySet();
    }

    @Override
    public final boolean isModuleImplementingServiceInterface(Class<? extends org.opendaylight.controller.config.api.annotations.AbstractServiceInterface> serviceInterface) {
        for (Class<?> ifc: serviceIfcs) {
            if (serviceInterface.isAssignableFrom(ifc)){
                return true;
            }
        }
        return false;
    }

    @Override
    public java.util.Set<Class<? extends org.opendaylight.controller.config.api.annotations.AbstractServiceInterface>> getImplementedServiceIntefaces() {
        return serviceIfcs;
    }

    @Override
    public org.opendaylight.controller.config.spi.Module createModule(String instanceName, org.opendaylight.controller.config.api.DependencyResolver dependencyResolver, org.osgi.framework.BundleContext bundleContext) {
        return instantiateModule(instanceName, dependencyResolver, bundleContext);
    }

    @Override
    public org.opendaylight.controller.config.spi.Module createModule(String instanceName, org.opendaylight.controller.config.api.DependencyResolver dependencyResolver, org.opendaylight.controller.config.api.DynamicMBeanWithInstance old, org.osgi.framework.BundleContext bundleContext) throws Exception {
        eu.virtuwind.resourcemonitor.impl.ResourcemonitorModule oldModule;
        try {
            oldModule = (eu.virtuwind.resourcemonitor.impl.ResourcemonitorModule) old.getModule();
        } catch(Exception e) {
            return handleChangedClass(dependencyResolver, old, bundleContext);
        }
        eu.virtuwind.resourcemonitor.impl.ResourcemonitorModule module = instantiateModule(instanceName, dependencyResolver, oldModule, old.getInstance(), bundleContext);
        module.setRpcRegistry(oldModule.getRpcRegistry());
        module.setDataBroker(oldModule.getDataBroker());
        module.setNotificationService(oldModule.getNotificationService());

        return module;
    }

    public eu.virtuwind.resourcemonitor.impl.ResourcemonitorModule instantiateModule(String instanceName, org.opendaylight.controller.config.api.DependencyResolver dependencyResolver, eu.virtuwind.resourcemonitor.impl.ResourcemonitorModule oldModule, java.lang.AutoCloseable oldInstance, org.osgi.framework.BundleContext bundleContext) {
        return new eu.virtuwind.resourcemonitor.impl.ResourcemonitorModule(new org.opendaylight.controller.config.api.ModuleIdentifier(NAME, instanceName), dependencyResolver, oldModule, oldInstance);
    }

    public eu.virtuwind.resourcemonitor.impl.ResourcemonitorModule instantiateModule(String instanceName, org.opendaylight.controller.config.api.DependencyResolver dependencyResolver, org.osgi.framework.BundleContext bundleContext) {
        return new eu.virtuwind.resourcemonitor.impl.ResourcemonitorModule(new org.opendaylight.controller.config.api.ModuleIdentifier(NAME, instanceName), dependencyResolver);
    }

    public eu.virtuwind.resourcemonitor.impl.ResourcemonitorModule handleChangedClass(org.opendaylight.controller.config.api.DependencyResolver dependencyResolver, org.opendaylight.controller.config.api.DynamicMBeanWithInstance old, org.osgi.framework.BundleContext bundleContext) throws Exception {
        String instanceName = old.getModule().getIdentifier().getInstanceName();
        eu.virtuwind.resourcemonitor.impl.ResourcemonitorModule newModule = new eu.virtuwind.resourcemonitor.impl.ResourcemonitorModule(new ModuleIdentifier(NAME, instanceName), dependencyResolver);
        Module oldModule = old.getModule();
        Class<? extends Module> oldModuleClass = oldModule.getClass();

        newModule.setRpcRegistry( (javax.management.ObjectName) oldModuleClass.getMethod("getRpcRegistry").invoke(oldModule));
        newModule.setDataBroker( (javax.management.ObjectName) oldModuleClass.getMethod("getDataBroker").invoke(oldModule));
        newModule.setNotificationService( (javax.management.ObjectName) oldModuleClass.getMethod("getNotificationService").invoke(oldModule));

        return newModule;
    }

    @Deprecated
    public eu.virtuwind.resourcemonitor.impl.ResourcemonitorModule handleChangedClass(org.opendaylight.controller.config.api.DynamicMBeanWithInstance old) throws Exception {
        throw new UnsupportedOperationException("Class reloading is not supported");
    }

    @Override
    public java.util.Set<eu.virtuwind.resourcemonitor.impl.ResourcemonitorModule> getDefaultModules(org.opendaylight.controller.config.api.DependencyResolverFactory dependencyResolverFactory, org.osgi.framework.BundleContext bundleContext) {
        return new java.util.HashSet<eu.virtuwind.resourcemonitor.impl.ResourcemonitorModule>();
    }

}
